'.source.fsharp':
  # -----------------------------------------------------------------
  # Snippets for the news web site demo 
  # -----------------------------------------------------------------

  'newyear, connect':
    'prefix': 'newyear-1-connect'
    'body': """
      let ctx =
        { ConsumerKey = Config.TwitterKey; ConsumerSecret = Config.TwitterSecret;
           AccessToken = Config.TwitterAccessToken; AccessSecret = Config.TwitterAccessSecret }
      let twitter = Twitter(UserContext(ctx))"""

  'newyear, tweet':
    'prefix': 'newyear-2-tweet'
    'body': """
      type Tweet =
        { Tweeted : DateTime
          Text : string
          OriginalArea : string
          UserName : string
          UserScreenName : string
          PictureUrl : string
          OriginalLocation : option<decimal * decimal>
          Phrase : int
          IsRetweet : bool
          InferredLocation : option<decimal * decimal> }"""


  'newyear, parse tweet':
    'prefix': 'newyear-3-parse-tweet'
    'body': """
      // Parse the location, if the tweet has it...
      let origLocation =
        match status.Geo with
        | Some(geo) when geo.Type = "Point" && geo.Coordinates.Length = 2 ->
            Some(geo.Coordinates.[0], geo.Coordinates.[1])
        | _ -> None

      // Get user name, text of the tweet and location
      match status.User, status.Text with
      | Some user, Some text ->
          let phrase = phrases |> Seq.tryFindIndex (fun phrase ->
            text.ToLower().Contains(phrase))
          match user.Location.String, phrase with
          | Some userLocation, Some phrase ->
              let rt = text.StartsWith("RT") || status.Retweeted = Some true
              { Tweeted = DateTime.UtcNow; OriginalArea = userLocation; Text = text
                PictureUrl = user.ProfileImageUrl; UserScreenName = user.ScreenName
                OriginalLocation = origLocation; UserName = user.Name; Phrase = phrase
                InferredLocation = None; IsRetweet = rt; } |> Some
          | _ -> None
      | _ -> None """

  'newyear, json types':
    'prefix': 'newyear-5-json-types'
    'body': """
      type JsonTypes = JsonProvider<\"\"\"{
          "socketFeedTweet":
            { "text":"hello", "originalArea":"World",
              "picture":"http://blah.jpg", "name":"sillyjoe", "screenName": "Silly Joe" },
          "socketMapTweet":
            { "latitude":50.07, "longitude":78.43, "text":"hello", "originalArea":"World",
              "picture":"http://blah.jpg", "name":"sillyjoe", "screenName": "Silly Joe" },
          "socketPhrase":
            [ {"phrase":"Happy new year", "count":10}, { "phrase":"manigong bagong taon", "count":5 } ],
          "timeZoneInfo":
            { "countries": [ {"country": "UK", "zone": "UTC" }, {"country": "UK", "zone": "UTC" } ],
              "zones": [ "UTC", "UTC+00:00" ] }
        }\"\"\">"""

  'newyear, server':
    'prefix': 'newyear-4-server'
    'body': """
      let root = IO.Path.Combine(__SOURCE_DIRECTORY__, "web")
      let app =
        choose
          [ path "/" >=> Files.browseFile root "index.html"
            Files.browse root ]"""

  'newyear, socket observable':
    'prefix': 'newyear-7-socket-observable'
    'body': """
      let socketOfObservable (updates:IObservable<string>) (webSocket:WebSocket) cx = socket {
        while true do
          let! update = updates |> Async.AwaitObservable |> Suave.Sockets.SocketOp.ofAsync
          do! webSocket.send Text (Encoding.UTF8.GetBytes update) true }"""

  'newyear, json feed type':
    'prefix': 'newyear-6-json-feed'
    'body': """
      JsonTypes.SocketFeedTweet(tweet.Text, tweet.OriginalArea, tweet.PictureUrl,
        tweet.UserName, tweet.UserScreenName).JsonValue.ToString())"""

  'newyear, mapquest':
    'prefix': 'newyear-8-mapquest'
    'body': """
      let [<Literal>] Sample = "http://www.mapquestapi.com/geocoding/v1/address?location=Prague&key=" + Config.MapQuestKey
      type Mapquest = JsonProvider<Sample>

      let locate place = async {
        let! locs = Mapquest.AsyncLoad("http://www.mapquestapi.com/geocoding/v1/address?location=" + place + "&key=" + Config.MapQuestKey)
        return
          locs.Results
          |> Seq.collect (fun r -> r.Locations)
          |> Seq.map (fun l -> l.LatLng.Lat, l.LatLng.Lng)
          |> Seq.tryHead }"""

  'newyear, use tweet location':
    'prefix': 'newyear-9-geo-tweets'
    'body': """
      // Handle tweets that come with a geolocation information (yay!)
      liveTweets
      |> Observable.choose (fun tw ->
          match tw.OriginalLocation with
          | Some loc ->
              ( tw.Tweeted.AddSeconds(5.0),
                { tw with InferredLocation = Some loc }) |> Some
          | _ -> None)
      |> Observable.add replay.AddEvent"""

  'newyear, geolocate tweets':
    'prefix': 'newyear-A-locate-tweets'
    'body': """
      // Geolocating tweets using MapQuest occasionally...
      liveTweets
      |> Observable.filter (fun tw -> tw.OriginalArea |> Seq.exists Char.IsLetter)
      |> Observable.limitRate 1000
      |> Observable.mapAsyncIgnoreErrors (fun tw -> async {
          let! located = locate tw.OriginalArea
          return located |> Option.map (fun loc ->
            tw.Tweeted.AddSeconds(10.0),
            { tw with InferredLocation = Some loc }) })
      |> Observable.choose id
      |> Observable.add replay.AddEvent"""

  'newyear, live tweets source':
    'prefix': 'newyear-B-live-tweets'
    'body': """
      let mapTweets =
        replay.EventOccurred
        |> Observable.map (fun tweet ->
            JsonTypes.SocketMapTweet(fst tweet.InferredLocation.Value,
              snd tweet.InferredLocation.Value, tweet.Text, tweet.OriginalArea,
              tweet.PictureUrl, tweet.UserName, tweet.UserScreenName).JsonValue.ToString())"""
