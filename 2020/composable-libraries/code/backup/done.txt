module Demo.Main

open Compost
open Compost.Html
open Demo.Helpers
open Fable.Import.Browser

// ----------------------------------------------------------------------------
// Some *fun* input data about British politics
// ----------------------------------------------------------------------------

let elections = 
  [ "Conservative", "#1F77B4", 317, 365; "Labour", "#D62728", 262, 202; 
    "Liberal Democrats", "#FF7F0E", 12, 11; "SNP", "#BCBD22", 35, 48; 
    "Green", "#2CA02C", 1, 1; "DUP", "#8C564B", 10, 8 ]

let gbpusd = 
  [ 1.4414; 1.4447; 1.4517; 1.4464; 1.456; 1.4552; 1.4465; 1.4334; 1.4282; 
    1.4114; 1.4196; 1.4064; 1.4293; 1.4694; 1.467; 1.4687; 1.4798; 1.3621; 
    1.3152; 1.3322; 1.3523; 1.3429; 1.327; 1.3287; 1.3048; 1.2885; 1.2932; 
    1.296; 1.2987; 1.3186; 1.3215; 1.3323; 1.3231; 1.3286; 1.3136; 1.3175; 
    1.3211; 1.3085; 1.3122; 1.3116; 1.3114; 1.312; 1.3267 ]

let Title(title, shape) =
  let title = 
    Shape.InnerScale(Some(co 0, co 100), Some(co 0, co 100),
      Derived.Font("14pt arial", "black",
        Shape.Text(numv 50, numv 50, Middle, 
          Center, 0.0, title) ))
  Shape.Layered [  
    OuterScale(Some(Continuous(co 0, co 100)), Some(Continuous(co 0, co 10)), title)
    OuterScale(Some(Continuous(co 0, co 100)), Some(Continuous(co 10, co 100)), shape)
  ]

// ----------------------------------------------------------------------------
// DEMO #1: Creating a bar chart
// ----------------------------------------------------------------------------

// TODO: 'Shape.Layered' of 'Derived.Column' (ca, co) 
// TODO: Add 'Derived.FillColor' and 'Shape.Padding'
// TODO: Add 'Shape.Axes'


let bars = 
  Shape.Layered [ 
    for p, clr, s19, s20 in elections -> 
      Derived.FillColor(clr,
        Shape.Padding((0., 10., 0., 10.), 
          Derived.Column(ca p, co s20)) )
  ]

Shape.Axes(false, false, true, true, bars) |> render

// ----------------------------------------------------------------------------
// DEMO #2: Creating a colored line chart
// ----------------------------------------------------------------------------

// TODO: Create a line chart using 'Seq.indexed gbpusd'
// TODO: Use 'Derived.StrokeColor' to make it black
// TODO: Add #aec7e8 background using 'Derived.FillColor' and 'Shape'
// DEMO: Add second background box
// DEMO: Add axes using 'Shape.Axes(f, t, t, t, body)'

// DEMO: Create 'title' chart element
// TODO: Align with chart using OuterScale


let line = 
  Shape.Line [
    for i, v in Seq.indexed gbpusd -> numv i, numv v
  ]

let body = 
  Shape.Layered [
    Derived.FillColor("#aec7e8", 
      Shape.Shape [
        (numv 0, numv 1); (numv 16, numv 1); 
        (numv 16, numv 1.8); (numv 0, numv 1.8) ] )
    Derived.FillColor("#ff9896",
      Shape.Shape [ 
        (numv (List.length gbpusd - 1), numv 1); (numv 16, numv 1); 
        (numv 16, numv 1.8); (numv (List.length gbpusd - 1), numv 1.8) ] )
    Derived.StrokeColor("black", line)
  ]

let chart = 
  Shape.Axes(false, true, true, true, body)

let title =
  Shape.InnerScale(Some(co 0, co 100), Some(co 0, co 100),
    Derived.Font("14pt arial", "black",
      Shape.Text(numv 50, numv 50, Middle, 
        Center, 0.0, "GBP-USD exchange rate (June-July 2016)") ))

let viz = 
  Shape.Layered [  
    OuterScale(Some(Continuous(co 0, co 100)), Some(Continuous(co 0, co 10)), title)
    OuterScale(Some(Continuous(co 0, co 100)), Some(Continuous(co 10, co 100)), chart)
  ]


viz |> render

// ----------------------------------------------------------------------------
// DEMO #3: Refactoring
// ----------------------------------------------------------------------------

// TODO: Extract the 'Title' function




// ----------------------------------------------------------------------------
// DEMO #4: Creating a colored line chart
// ----------------------------------------------------------------------------

// TODO: Render simple barchart using 'renderAnim state render update' & 'svg'
// TODO: Define Start and Anim events, 'update' function and add button
// TODO: Scale data based on state, trigger timeout

type Update = 
  | Start
  | Animate

let update state evt = 
  match evt with 
  | Start -> 0.02
  | Animate -> state + 0.02

let barChart data = 
  Shape.Axes(false, false, true, true, 
    Shape.InnerScale(None, Some(co 0, co 400), Shape.Layered [ 
      for p, clr, v in data -> 
        Derived.FillColor(clr,
          Shape.Padding((0., 10., 0., 10.), 
            Derived.Column(ca p, co v)) )
    ]))

let render trigger state = 
  if state > 0.0 && state < 1.0 then window.setTimeout((fun () -> trigger Animate), 10) |> ignore
  let data = [ for p, c, v0, v1 in elections -> p, c, float v0 + float (v1 - v0) * state ]
  h?div [] [
    svg (barChart data)
    h?button [ "click" =!> fun _ _ -> trigger Start ] [ text "Show 2020" ]
  ]

renderAnim 0.0 render update
